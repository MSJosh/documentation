let dt_lookBack = 1h; // Define the lookback period for Teams data as 1 hour
let ioc_lookBack = 14d; // Define the lookback period for threat intelligence data as 14 days
let MessageUrlInfo_ = MessageUrlInfo
| where isnotempty(Url) or isnotempty(UrlDomain) // Filter for non-empty URLs or URL domains
| where TimeGenerated >= ago(dt_lookBack) // Filter for records within the lookback period
| extend Url = tolower(Url),
         UrlDomain = tolower(replace(@"^www\.", "", UrlDomain)) // Remove 'www.' prefix from domain
| extend MessageUrlInfo_TimeGenerated = TimeGenerated; // Create a new column for the timegenerated
let MessageEvents = MessageEvents
| where TimeGenerated >= ago(dt_lookBack); // Filter Teams events within the lookback period
let TI_Urls = ThreatIntelligenceIndicator
| where TimeGenerated >= ago(ioc_lookBack)
| where isnotempty(Url)
| extend Url = tolower(Url)
| join kind=innerunique (MessageUrlInfo_) on Url
| where Active == true and ExpirationDateTime > now()
| where MessageUrlInfo_TimeGenerated < ExpirationDateTime
| summarize MessageUrlInfo_TimeGenerated = arg_max(MessageUrlInfo_TimeGenerated, *) by IndicatorId, Url
| project MessageUrlInfo_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Url, UserAgent, TeamsMessageId;
let TI_Domains = ThreatIntelligenceIndicator
| where TimeGenerated >= ago(ioc_lookBack)
| where isnotempty(DomainName)
| extend DomainName = tolower(replace(@"^www\.", "", DomainName)) // Normalize DomainName to match UrlDomain
| join kind=innerunique (MessageUrlInfo_) on $left.DomainName == $right.UrlDomain
| where Active == true and ExpirationDateTime > now()
| where MessageUrlInfo_TimeGenerated < ExpirationDateTime
| summarize MessageUrlInfo_TimeGenerated = arg_max(MessageUrlInfo_TimeGenerated, *) by IndicatorId, UrlDomain
| project Timestamp=MessageUrlInfo_TimeGenerated, ReportId, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, UrlDomain, UserAgent, TeamsMessageId;
union TI_Urls, TI_Domains
| extend timestamp = MessageUrlInfo_TimeGenerated
| join kind=inner (MessageEvents) on TeamsMessageId
| where DeliveryAction !has "Blocked"
| extend RecipientSmtpAddress = tostring(parse_json(RecipientDetails)[0].RecipientSmtpAddress)
| extend Name = tostring(split(RecipientSmtpAddress, '@', 0)[0]),
         UPNSuffix = tostring(split(RecipientSmtpAddress, '@', 1)[0]);
