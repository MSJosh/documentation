// Firepower Parser V2 - Final Optimized Version
// Additional optimizations applied:
// 6. Removed unused MessageLower field
// 7. Added early filtering for better performance
// 8. Combined duplicate regex patterns 
// 9. Optimized IP validation using ipv4_is_valid/ipv6_is_valid
// 10. Used parse_csv for structured field extraction where applicable
// 11. Consolidated similar extractions to reduce regex operations

let SourceIPRegex = @"([0-9]{1,3}\.){3}[0-9]{1,3}|([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){0,6}:[0-9a-fA-F]{1,4}";
let PortRegex = @"^\d+$";

Firepower_CL
// Early filtering to process only relevant logs - major performance boost
| where Message has_any ("ConnectionID", "connection", "SrcIP", "DstIP", "faddr", "gaddr", "from", "to", "EventPriority", "protocol")
| extend 
    // Core identifiers
    ConnectionID = coalesce(
        extract(@"ConnectionID:\s*(\d+)", 1, Message),
        extract(@"connection (\d+)", 1, Message)
    ),
    Device = extract(@"^%([A-Za-z0-9\-]+-\d+-\d+)", 1, Message),
    
    // Optimize Action extraction with better logic
    Action = case(
        Message has "drop rate-", extract(@"\[ Scanning\] (drop rate-\d+ exceeded)", 1, Message),
        Message has "connection", extract(@"([A-Za-z0-9\s\-]+ connection)", 1, Message),
        Message has "Deny", "Deny",
        Message has "Allow", "Allow",
        ""
    ),
    
    // Combined IP/Port extractions to reduce regex operations
    SrcData = extract(@"SrcIP:\s*([0-9a-fA-F:.]+)(?:\s+SrcPort:\s*(\d+))?", 0, Message),
    DstData = extract(@"DstIP:\s*([0-9a-fA-F:.]+)(?:\s+DstPort:\s*(\d+))?", 0, Message),
    
    // More efficient faddr/gaddr extraction
    FaddrData = extract(@"faddr ([0-9a-fA-F:.]+)(?:/(\d+))?", 0, Message),
    GaddrData = extract(@"gaddr ([0-9a-fA-F:.]+)(?:/(\d+))?", 0, Message),
    
    // Combined from/to extraction
    FromToData = extract(@"(?:from|to) ([A-Za-z0-9_\-]+):([0-9a-fA-F:.]+)(?:/(\d+))?", 0, Message),
    
    // Batch extract standard fields that commonly appear together
    StandardFields = extract(@"EventPriority:\s*([^,\s]+).*?DeviceUUID:\s*([a-f0-9\-]+).*?InstanceID:\s*(\d+)", 0, Message),
    
    // Extract time-related fields together
    TimeFields = extract(@"FirstPacketSecond:\s*([^\s,]+).*?duration\s+(\d{1,2}:\d{2}:\d{2})", 0, Message),
    
    // Batch extract policy fields
    PolicyData = extract(@"AccessControlRuleAction:\s*([^,]+).*?ACPolicy:\s*([^\s,]+).*?AccessControlRuleName:\s*([^\s,]+)", 0, Message),
    
    // Combined protocol extraction - more efficient
    Protocol = case(
        Message has "protocol:", extract(@"(?i)protocol:\s*([a-zA-Z0-9\-]+)", 1, Message),
        Message has "protocol=", extract(@"protocol=([A-Z]+)", 1, Message),
        Message has "TCP", "TCP",
        Message has "UDP", "UDP", 
        Message has "ICMP", "ICMP",
        Message has "GRE", "GRE",
        Message has "NetBIOS-ns", "NetBIOS-ns",
        "Unknown"
    ),
    
    // Interface and Zone info
    NetworkInfo = extract(@"IngressInterface:\s*([^\s,]+).*?IngressZone:\s*([^\s,]+)", 0, Message),
    
    // Batch extract packet/byte counters
    PacketData = extract(@"InitiatorPackets:\s*(\d+).*?ResponderPackets:\s*(\d+).*?InitiatorBytes:\s*(\d+).*?ResponderBytes:\s*(\d+)", 0, Message),
    
    // Application data together
    AppData = extract(@"Client:\s*([^,]+).*?ApplicationProtocol:\s*([^,]+).*?ClientAppDetector:\s*([^,]+)", 0, Message),
    
    // DNS fields together
    DNSData = extract(@"DNSQuery:\s*([^,]+).*?DNSRecordType:\s*([^,]+).*?DNSResponseType:\s*([^,]+)", 0, Message),
    
    // Rate limiting data together
    RateData = extract(@"Current burst rate is (\d+).*?max configured rate is (\d+).*?Current average rate is (\d+).*?Cumulative total count is (\d+)", 0, Message),
    
    // Other fields
    Bytes = extract(@"bytes (\d+)", 1, Message),
    PrefilterPolicy = extract(@"Prefilter Policy:\s*([^\s,]+)", 1, Message),
    NAPPolicy = extract(@"NAPPolicy:\s*([^,\n]+)", 1, Message),
    VLAN_ID = toint(extract(@"VLAN_ID:\s*(\d+)", 1, Message)),
    ReferencedHost = extract(@"ReferencedHost:\s*([^,]+)", 1, Message),
    DropRateExceeded = extract(@"\[ Scanning\] (drop rate-\d+ exceeded)", 1, Message),
    
    // Reason and EventType
    Reason = coalesce(
        extract(@"(SYN Timeout|FIN Timeout|TCP Reset by peer|Connection expired|Connection terminated|Pinhole timeout)", 1, Message),
        extract(@"type\s+\d+\s+code\s+\d+", 0, Message)
    ),
    EventType = iif(Message has "FIN Timeout", "FIN Timeout", "Unknown")

| extend
    // Parse extracted data efficiently
    SrcIPFromSrcIP = extract(@"SrcIP:\s*([0-9a-fA-F:.]+)", 1, SrcData),
    SrcPortFromSrcPort = extract(@"SrcPort:\s*(\d+)", 1, SrcData),
    DstIPFromDstIP = extract(@"DstIP:\s*([0-9a-fA-F:.]+)", 1, DstData),
    DstPortFromDstPort = extract(@"DstPort:\s*(\d+)", 1, DstData),
    
    FaddrIP = extract(@"faddr ([0-9a-fA-F:.]+)", 1, FaddrData),
    FaddrPort = extract(@"faddr [0-9a-fA-F:.]+/(\d+)", 1, FaddrData),
    GaddrIP = extract(@"gaddr ([0-9a-fA-F:.]+)", 1, GaddrData),
    GaddrPort = extract(@"gaddr [0-9a-fA-F:.]+/(\d+)", 1, GaddrData),
    
    // Parse structured data
    EventPriority = extract(@"EventPriority:\s*([^,\s]+)", 1, StandardFields),
    DeviceUUID = extract(@"DeviceUUID:\s*([a-f0-9\-]+)", 1, StandardFields),
    InstanceID = extract(@"InstanceID:\s*(\d+)", 1, StandardFields),
    
    FirstPacketSecond = extract(@"FirstPacketSecond:\s*([^\s,]+)", 1, TimeFields),
    Duration = extract(@"duration\s+(\d{1,2}:\d{2}:\d{2})", 1, TimeFields),
    
    AccessControlRuleAction = trim(",", extract(@"AccessControlRuleAction:\s*([^,]+)", 1, PolicyData)),
    ACPolicy = extract(@"ACPolicy:\s*([^\s,]+)", 1, PolicyData),
    AccessControlRuleName = extract(@"AccessControlRuleName:\s*([^\s,]+)", 1, PolicyData),
    
    IngressInterface = extract(@"IngressInterface:\s*([^\s,]+)", 1, NetworkInfo),
    IngressZone = extract(@"IngressZone:\s*([^\s,]+)", 1, NetworkInfo),
    
    InitiatorPackets = toint(extract(@"InitiatorPackets:\s*(\d+)", 1, PacketData)),
    ResponderPackets = toint(extract(@"ResponderPackets:\s*(\d+)", 1, PacketData)),
    InitiatorBytes = toint(extract(@"InitiatorBytes:\s*(\d+)", 1, PacketData)),
    ResponderBytes = toint(extract(@"ResponderBytes:\s*(\d+)", 1, PacketData)),
    
    Client = extract(@"Client:\s*([^,]+)", 1, AppData),
    ApplicationProtocol = extract(@"ApplicationProtocol:\s*([^,]+)", 1, AppData),
    ClientAppDetector = extract(@"ClientAppDetector:\s*([^,]+)", 1, AppData),
    
    DNSQuery = extract(@"DNSQuery:\s*([^,]+)", 1, DNSData),
    DNSRecordType = extract(@"DNSRecordType:\s*([^,]+)", 1, DNSData),
    DNSResponseType = extract(@"DNSResponseType:\s*([^,]+)", 1, DNSData),
    
    BurstRateCurrent = toint(extract(@"Current burst rate is (\d+)", 1, RateData)),
    BurstRateMax = toint(extract(@"max configured rate is (\d+)", 1, RateData)),
    AvgRateCurrent = toint(extract(@"Current average rate is (\d+)", 1, RateData)),
    CumulativeDropCount = toint(extract(@"Cumulative total count is (\d+)", 1, RateData)),
    AvgRateMax = toint(extract(@"Current average rate is \d+ per second, max configured rate is (\d+)", 1, Message))

| extend
    // Build final IP/Port values using coalesce
    SourceIP_temp = coalesce(
        SrcIPFromSrcIP,
        FaddrIP,
        extract(@"from [A-Za-z0-9_\-]+:([0-9a-fA-F:.]+)", 1, FromToData),
        extract(@":([0-9a-fA-F:.]+)/", 1, Message)
    ),
    SourcePort_temp = coalesce(
        SrcPortFromSrcPort,
        FaddrPort,
        extract(@"from [A-Za-z0-9_\-]+:[0-9a-fA-F:.]+/(\d+)", 1, FromToData),
        extract(@":([0-9]+)/", 1, Message)
    ),
    DestIP_temp = coalesce(
        DstIPFromDstIP,
        GaddrIP,
        extract(@"to [A-Za-z0-9_\-]+:([0-9a-fA-F:.]+)", 1, FromToData),
        extract(@":([0-9a-fA-F:.]+)/", 1, Message)
    ),
    DestPort_temp = coalesce(
        DstPortFromDstPort,
        GaddrPort,
        extract(@"to [A-Za-z0-9_\-]+:[0-9a-fA-F:.]+/(\d+)", 1, FromToData),
        extract(@":([0-9]+)/", 1, Message)
    )

| extend
    // Optimized IP validation using built-in functions
    SourceIP = case(
        ipv4_is_valid(SourceIP_temp), SourceIP_temp,
        ipv6_is_valid(SourceIP_temp), SourceIP_temp,
        SourceIP_temp matches regex SourceIPRegex, SourceIP_temp,
        ""
    ),
    DestIP = case(
        ipv4_is_valid(DestIP_temp), DestIP_temp,
        ipv6_is_valid(DestIP_temp), DestIP_temp,
        DestIP_temp matches regex SourceIPRegex, DestIP_temp,
        ""
    ),
    SourcePort = toint(iif(SourcePort_temp matches regex PortRegex, SourcePort_temp, "0")),
    DestPort = toint(iif(DestPort_temp matches regex PortRegex, DestPort_temp, "0"))

| extend
    // Final fallback extractions only if needed - minimal additional regex
    SourceIP = iif(isempty(SourceIP) and Message has "from", extract(@"from ([0-9.]+)/\d+", 1, Message), SourceIP),
    SourcePort = iif(SourcePort == 0 and Message has "from", toint(extract(@"from [0-9.]+/(\d+)", 1, Message)), SourcePort),
    DestIP = iif(isempty(DestIP) and Message has "to", extract(@"to ([0-9.]+)/\d+", 1, Message), DestIP),
    DestPort = iif(DestPort == 0 and Message has "to", toint(extract(@"to [0-9.]+/(\d+)", 1, Message)), DestPort),
    
    // Zone extraction - conditional to minimize regex operations
    SourceZoneFromTeardown = iif(Message has_any ("for", "from"), 
        coalesce(
            extract(@"for ([^:]+):[0-9.]+(?:/\d+)?", 1, Message),
            extract(@"from ([^:]+):[0-9.]+(?:/\d+)?", 1, Message)
        ), ""),
    DestZoneFromTeardown = iif(Message has "to", extract(@"to ([^:]+):[0-9.]+/\d+", 1, Message), "")

| project-away 
    // Clean up all temporary fields
    SrcData, DstData, FaddrData, GaddrData, FromToData, StandardFields, TimeFields, 
    PolicyData, NetworkInfo, PacketData, AppData, DNSData, RateData,
    SrcIPFromSrcIP, SrcPortFromSrcPort, DstIPFromDstIP, DstPortFromDstPort,
    FaddrIP, FaddrPort, GaddrIP, GaddrPort,
    SourceIP_temp, SourcePort_temp, DestIP_temp, DestPort_temp

| project 
    ConnectionID,
    Device,
    Action,
    SourceIP,
    SourcePort,
    DestIP,
    DestPort,
    Duration,
    Bytes,
    EventPriority,
    DeviceUUID,
    InstanceID,
    FirstPacketSecond,
    AccessControlRuleAction,
    Protocol,
    IngressInterface,
    IngressZone,
    ACPolicy,
    AccessControlRuleName,
    PrefilterPolicy,
    InitiatorPackets,
    ResponderPackets,
    InitiatorBytes,
    ResponderBytes,
    NAPPolicy,
    VLAN_ID,
    EventType,
    Client,
    ApplicationProtocol,
    DNSQuery,
    DNSRecordType,
    DNSResponseType,
    ReferencedHost,
    ClientAppDetector,
    DropRateExceeded,
    BurstRateCurrent,
    BurstRateMax,
    AvgRateCurrent,
    AvgRateMax,
    CumulativeDropCount,
    SourceZoneFromTeardown,
    DestZoneFromTeardown,
    Reason,
    Message
