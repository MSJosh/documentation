let SourceIPRegex = @"([0-9]{1,3}\.){3}[0-9]{1,3}|([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){0,6}:[0-9a-fA-F]{1,4}";
let PortRegex = @"^\d+$";
Firepower_CL
| extend 
    ConnectionID = extract(@"connection (\d+)", 1, Message),
    Action = extract(@"([A-Za-z0-9\s\-]+ connection)", 1, Message),
    Device = extract(@"^%([A-Za-z0-9\-]+-\d+-\d+)", 1, Message),
    SourceIP_temp = iif(Message has "faddr", extract(@"faddr ([0-9a-fA-F:.]+)", 1, Message), 
                       iif(Message has "from", extract(@"from [A-Za-z0-9_\-]+:([0-9a-fA-F:.]+)", 1, Message),
                           extract(@":([0-9a-fA-F:.]+)/", 1, Message))),
    SourcePort_temp = iif(Message has "SrcPort", extract(@"SrcPort:\s*(\d+)", 1, Message),
                          iif(Message has "/", extract(@"(?:[0-9a-fA-F:.]+/)(\d+)", 1, Message), 
                          iif(Message has "from", extract(@"from [A-Za-z0-9_\-]+:[0-9a-fA-F:.]+/(\d+)", 1, Message),
                              extract(@":([0-9]+)/", 1, Message)))),
    DestIP_temp = iif(Message has "gaddr", extract(@"gaddr ([0-9a-fA-F:.]+)", 1, Message), 
                     iif(Message has "DstIP", extract(@"DstIP:\s*([0-9a-fA-F:.]+)", 1, Message),
                     iif(Message has "to", extract(@"to [A-Za-z0-9_\-]+:([0-9a-fA-F:.]+)", 1, Message),
                         extract(@":([0-9a-fA-F:.]+)/", 1, Message)))),
    DestPort_temp = iif(Message has "DstPort", extract(@"DstPort:\s*(\d+)", 1, Message),
                        iif(Message has "gaddr", extract(@"gaddr [0-9a-fA-F:.]+/(\d+)", 1, Message), 
                        iif(Message has "to", extract(@"to [A-Za-z0-9_\-]+:[0-9a-fA-F:.]+/(\d+)", 1, Message),
                            extract(@":([0-9]+)/", 1, Message)))),
    Duration = extract(@"duration\s+(\d{1,2}:\d{2}:\d{2})", 1, Message),
    Bytes = extract(@"bytes (\d+)", 1, Message),
    EventPriority = extract(@"EventPriority:\s*(\S+)", 1, Message),
    DeviceUUID = extract(@"DeviceUUID:\s*([a-f0-9\-]+)", 1, Message),
    InstanceID = extract(@"InstanceID:\s*(\d+)", 1, Message),
    FirstPacketSecond = extract(@"FirstPacketSecond:\s*([^\s,]+)", 1, Message),
    AccessControlRuleAction = trim(",", extract(@"AccessControlRuleAction:\s*([^,]+)", 1, Message)),
    Protocol = iif(Message has "Protocol:", extract(@"Protocol:\s*([a-zA-Z0-9\-]+)", 1, Message),
                   iif(isnotempty(extract(@"\b(TCP|UDP|ICMP|GRE|NetBIOS-ns)\b", 1, Message)), extract(@"\b(TCP|UDP|ICMP|GRE|NetBIOS-ns)\b", 1, Message), "Unknown")),
    IngressInterface = extract(@"IngressInterface:\s*([^\s,]+)", 1, Message),
    IngressZone = extract(@"IngressZone:\s*([^\s,]+)", 1, Message),
    ACPolicy = extract(@"ACPolicy:\s*([^\s,]+)", 1, Message),
    AccessControlRuleName = extract(@"AccessControlRuleName:\s*([^\s,]+)", 1, Message),
    PrefilterPolicy = extract(@"Prefilter Policy:\s*([^\s,]+)", 1, Message),
    InitiatorPackets = extract(@"InitiatorPackets:\s*(\d+)", 1, Message),
    ResponderPackets = extract(@"ResponderPackets:\s*(\d+)", 1, Message),
    InitiatorBytes = extract(@"InitiatorBytes:\s*(\d+)", 1, Message),
    ResponderBytes = extract(@"ResponderBytes:\s*(\d+)", 1, Message),
    NAPPolicy = extract(@"NAPPolicy:\s*([^\s,]+)", 1, Message),
    VLAN_ID = extract(@"VLAN_ID:\s*(\d+)", 1, Message),
    EventType = extract(@"FIN Timeout", 0, Message),
    Client = extract(@"Client:\s*([^,]+)", 1, Message),
    ApplicationProtocol = extract(@"ApplicationProtocol:\s*([^,]+)", 1, Message),
    DNSQuery = extract(@"DNSQuery:\s*([^,]+)", 1, Message),
    DNSRecordType = extract(@"DNSRecordType:\s*([^,]+)", 1, Message),
    DNSResponseType = extract(@"DNSResponseType:\s*([^,]+)", 1, Message),
    ReferencedHost = extract(@"ReferencedHost:\s*([^,]+)", 1, Message),
    ClientAppDetector = extract(@"ClientAppDetector:\s*([^,]+)", 1, Message),
    TeardownType = extract(@"^%FTD-\d+-(\d+):\s*(Teardown [^:]+ connection)", 2, Message),
    TeardownConnectionID = extract(@"Teardown [^:]+ connection (\d+)", 1, Message),
    TeardownReason = extract(@"bytes \d+ ([^\s]+ Timeout)", 1, Message),
    SourceZoneFromTeardown = extract(@"from ([^:]+):[0-9a-fA-F:.]+/\d+", 1, Message),
    DestZoneFromTeardown = extract(@"to ([^:]+):[0-9a-fA-F:.]+/\d+", 1, Message)
| extend
    SourceIP = iif(SourceIP_temp matches regex SourceIPRegex, SourceIP_temp, ""),
    SourcePort = iif(SourcePort_temp matches regex PortRegex, SourcePort_temp, ""),
    DestIP = iif(DestIP_temp matches regex SourceIPRegex, DestIP_temp, ""),
    DestPort = iif(DestPort_temp matches regex PortRegex, DestPort_temp, ""),
    EventType = iif(isnull(EventType), "Unknown", EventType)
| project 
    ConnectionID,
    Device,
    Action,
    SourceIP,
    SourcePort,
    DestIP,
    DestPort,
    Duration,
    Bytes,
    EventPriority,
    DeviceUUID,
    InstanceID,
    FirstPacketSecond,
    AccessControlRuleAction,
    Protocol,
    IngressInterface,
    IngressZone,
    ACPolicy,
    AccessControlRuleName,
    PrefilterPolicy,
    InitiatorPackets,
    ResponderPackets,
    InitiatorBytes,
    ResponderBytes,
    NAPPolicy,
    VLAN_ID,
    EventType,
    Client,
    ApplicationProtocol,
    DNSQuery,
    DNSRecordType,
    DNSResponseType,
    ReferencedHost,
    ClientAppDetector,
    TeardownType,
    TeardownConnectionID,
    TeardownReason,
    SourceZoneFromTeardown,
    DestZoneFromTeardown,
    Message
